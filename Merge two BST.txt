Merge two BST 

Given two BSTs, return elements of merged BSTs in sorted form.

Input:

BST1:
       5
     /  \
    3    6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.



Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.


Expected Time Complexity: O((m+n)*log(m+n))
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)



class Solution {
  public:
    // Function to return a list of integers denoting the node
    // values of both the BST in a sorted order.
    
    void inorder(Node * root , vector<int>&ans){
        if(root == NULL){
            return ; 
        }inorder(root->left , ans) ; 
        ans.push_back(root->data) ; 
        inorder(root->right , ans) ; 
    }
    
    vector<int> merge(Node *root1, Node *root2) {
        // Your code here
        vector<int>ans ; 
        inorder(root1 , ans) ; 
        inorder(root2 , ans) ; 
        sort(ans.begin() , ans.end()) ; 
        return ans ; 
        
    }
};


