Parsing A Boolean Expression


A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:

't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.

It is guaranteed that the given expression is valid and follows the given rules.



Example 1:

Input: expression = "&(|(f))"
Output: false
Explanation: 
First, evaluate |(f) --> f. The expression is now "&(f)".
Then, evaluate &(f) --> f. The expression is now "f".
Finally, return false.
Example 2:

Input: expression = "|(f,f,f,t)"
Output: true
Explanation: The evaluation of (false OR false OR false OR true) is true.
Example 3:

Input: expression = "!(&(f,t))"
Output: true
Explanation: 
First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now "!(f)".
Then, evaluate !(f) --> NOT false --> true. We return true.



Constraints:

1 <= expression.length <= 2 * 104
expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.



Intuition
The intuition behind this problem is that the given boolean expression can be broken down
and evaluated step by step, similar to how mathematical expressions 
are evaluated. Since the expression includes parentheses for grouping
subexpressions, we can evaluate the innermost parts first and then 
work outward. This naturally suggests a stack-based approach, where 
we process the characters in reverse order and push elements onto 
the stack until we encounter an operator (!, &, or |), at which point
 we can evaluate the grouped expression.





Approach
Stack Usage:
We use a stack (st) to store characters as we traverse the expression in reverse (from right to left). This allows us to handle nested expressions properly since stacks follow the "last in, first out" (LIFO) principle.
Traverse the Expression:
The string exp is processed from right to left because this helps us to first encounter the results (like t or f for true/false) before the operator that needs to be applied to them.
For each character:
If it’s a closing parenthesis ), t (true), or f (false), we push it onto the stack.
If it’s an opening parenthesis (, this indicates that we’ve finished processing a subexpression. We pop the stack until we find the corresponding closing parenthesis) and collect the results (t or f).
Evaluate Operators:
When we encounter an operator (|, &, or !):

| (OR):

Iterate through the res vector and apply the OR operation across all elements: output |= res[i].
& (AND):

Iterate through the res vector and apply the AND operation across all elements: output &= res[i].
! (NOT):

Negate the first (and only, since exp is valid) value: output = !res[0].
After evaluating, the result (t or f) is pushed back onto the stack for further processing.
4. Final Result:

After processing all characters, the top of the stack will contain the result (t or f), which is returned as the final boolean value.



class Solution {
public:
    bool parseBoolExpr(string exp) {
        stack<char> st;
        int n = exp.length();
        vector<bool> res;
        for (int i = n - 1; i > 0; i--) {
            char c = exp[i];

            if (c == ')' || c == 't' || c == 'f') {
                st.push(c);
            } else if (c == '(') {
                char sign = exp[i - 1];
                while (st.top() != ')') {
                    if (st.top() == 't') {
                        res.push_back(1);
                    } else if (st.top() == 'f') {
                        res.push_back(0);
                    }
                    st.pop();
                }
                st.pop();
                if (sign == '|') {
                    bool output = res[0];
                    for (int i = 1; i < res.size(); i++) {
                        output |= res[i];
                    }
                    output ? st.push('t') : st.push('f');
                } else if (sign == '&') {
                    bool output = res[0];
                    for (int i = 1; i < res.size(); i++) {
                        output &= res[i];
                    }
                    output ? st.push('t') : st.push('f');
                } else {
                    bool output = !res[0];
                    output ? st.push('t') : st.push('f');
                }
                res = {};
            } else
                continue;
        }
        return st.top() == 't';
    }
};






Complexity
Time complexity:
The time complexity is O(n) where n is the length of the expression string exp. We traverse the expression once and perform constant-time operations (push/pop) on the stack during each step.

Space complexity:
The space complexity is also O(n) due to the stack used to store intermediate results and characters from the expression. In the worst case, the stack may hold all characters of the expression
























































