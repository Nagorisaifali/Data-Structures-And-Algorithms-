Non Repeating Character


Given a string s consisting of lowercase Latin Letters. Return the first non-repeating character in s. If there is no non-repeating character, return '$'.
Note: When you return '$' driver code will output -1.


Examples:

Input: s = "geeksforgeeks"
Output: 'f'
Explanation: In the given string, 'f' is the first character in the string which does not repeat.


Input: s = "racecar"
Output: 'e'
Explanation: In the given string, 'e' is the only character in the string which does not repeat.


Input: s = "aabbccc"
Output: -1
Explanation: All the characters in the given string are repeating.



Constraints:
1 <= s.size() <= 105


Introduction:
In this program, we will explore an algorithm to find the first non-repeating character in a given string. 
The solution utilizes a hashmap to efficiently count the occurrences of each character in the string, enabling us to identify the first character with a count of 1.

 
"Hashmap-Based Frequency Counting" approach.
Explanation of the Approach:
Hashmap-Based Frequency Counting:
The first step of the approach involves counting the occurrences of each character in the input string using a hashmap.
A hashmap is a data structure that allows us to store key-value pairs, where each key represents a unique character, and the value represents the count of occurrences of that character in the string.
We iterate through the string and update the hashmap accordingly, keeping track of the frequency of each character.


class Solution {
  public:
    // Function to find the first non-repeating character in a string.
    char nonRepeatingChar(string &s) {
        // Your code here
        unordered_map<char , int>mp ; 
        for(auto &ch : s){
            mp[ch]++ ; 
        }
        for(auto &ch : s){
            if(mp[ch] == 1){
                return ch ; 
            }
        }return '$' ; 
    }
};
