Binary Tree Level Order Traversal

Given the root of a binary tree, return the level order traversal of its nodes'
values. (i.e., from left to right, level by level).



Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]



Input: root = [1]
Output: [[1]]


Input: root = []
Output: []



Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000


class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
       vector<vector<int>>lvl ; 
        if(root == NULL){
            return lvl ; 
        }queue<TreeNode *>q ; 
        q.push(root) ; 
        while(!q.empty()){
            int n = q.size() ; 
            vector<int>ans ; 
            for(int i=0;i<n;i++){
                TreeNode * temp = q.front() ; 
                q.pop() ; 
                ans.push_back(temp->val) ; 
                if(temp->left){
                    q.push(temp->left) ; 
                }if(temp->right){
                    q.push(temp->right) ; 
                }
            }lvl.push_back(ans) ; 
        }return lvl ; 
    }
};









