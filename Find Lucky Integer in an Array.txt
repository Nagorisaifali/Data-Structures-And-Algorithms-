Find Lucky Integer in an Array

Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.

Return the largest lucky integer in the array. If there is no lucky integer return -1.
 

Example 1:

Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.
Example 2:

Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.
Example 3:

Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.
 

Constraints:

1 <= arr.length <= 500
1 <= arr[i] <= 500


Intuition
Count frequencies of all elements
Check for largest element with frequency equal to value

Approach
Using a unordered map for storing frequencies of all the elements
Traverse through map , update lucky number when key = value in map
and keep storing maximum number
if not found , return -1

Complexity
Time complexity: O(N)
O(N) for array traversal
O(N) for map traversal
TOTAL TC = O(2*N) ==> O(N)
Space complexity: O(N) for map


Code

class Solution {
public:
    int findLucky(vector<int>& arr) {
        unordered_map<int,int>mp ; 
        for(auto x : arr){
            mp[x]++ ; 
        }
        int ans = -1 ; 
        for(auto x : mp){
            if(x.first == x.second){
                ans = max(ans , x.first) ; 
            }
        }return ans ; 
    }
};

