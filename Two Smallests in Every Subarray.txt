Two Smallests in Every Subarray

Given an array of integers arr, the task is to find and return the 
maximum sum of the smallest and second smallest element among all 
possible subarrays of size greater than one. If it is not possible, 
then return -1.



Examples:

Input: arr = [4, 3, 1, 5, 6]
Output: 11
Explanation: Subarrays with smallest and second smallest are,
Subarray: [4, 3], smallest = 3, second smallest = 4, sum = 7
Subarray: [4, 3, 1], smallest = 1, second smallest = 3, sum = 4
Subarray: [4, 3, 1, 5], smallest = 1, second smallest = 3, sum = 4
Subarray: [4, 3, 1, 5, 6], smallest = 1, second smallest = 3, sum = 4
Subarray: [3, 1], smallest = 1, second smallest = 3, sum = 4
Subarray: [3, 1, 5], smallest = 1, second smallest = 3, sum = 4
Subarray: [3, 1, 5, 6], smallest = 1, second smallest = 3, sum = 4
Subarray: [1, 5], smallest = 1, second smallest = 5, sum = 6
Subarray: [1, 5, 6] ,smallest = 1, second smallest = 5, sum = 6
Subarray: [5, 6], smallest = 5, second smallest = 6, sum = 11
Maximum sum among all above choices is, 5 + 6 = 11, hence the answer is 11.


Input: arr = [1]
Output: -1
Explanation: Here the size of array is 1, but we need minimum 2 elements. Hence, the answer is -1.


Expected Time Complexity: O(n)
Expected Space Complexity: O(1)


Approach

1. **Observations:**
   - For each pair of consecutive elements, we can directly calculate the sum since they are already adjacent.
   - This is efficient because the two smallest elements in subarrays of size 2 are simply the two consecutive elements.
   
2. **Steps:**
   - Iterate through the array while considering each pair of consecutive elements.
   - Calculate the sum for each pair of consecutive elements.
   - Keep track of the maximum sum encountered during the iteration.
   
3. **Edge Case:**
   - If the array has fewer than 2 elements, it's not possible to form any subarray of size greater than 1, so return `-1`.



int pairWithMaxSum(vector<int>& arr) {
        if(arr.size() < 2){
            return -1 ; 
        }int maxi = arr[0] + arr[1] ;
        for(int i=0;i<arr.size()-1;i++){
            int currsum = arr[i] + arr[i+1] ; 
            maxi = max(maxi , currsum) ; 
        }return maxi ; 
}



Time Complexity

- The algorithm iterates through the array once, calculating the sum of consecutive elements, which takes O(n), where n is the size of the array.

Space Complexity

- The space complexity is O(1) since no additional space proportional to the input size is used apart from a few variables.














