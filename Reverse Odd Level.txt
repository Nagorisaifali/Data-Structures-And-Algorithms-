
Reverse Odd Levels Of Binary Tree 


Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.

For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.

A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.

The level of a node is the number of edges along the path between it and the root node.

 
Example 1:


Input: root = [2,3,5,8,13,21,34]
Output: [2,5,3,8,13,21,34]
Explanation: 
The tree has only one odd level.
The nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.



Example 2:
Input: root = [7,13,11]
Output: [7,11,13]
Explanation: 
The nodes at level 1 are 13, 11, which are reversed and become 11, 13.


Example 3:
Input: root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]
Output: [0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]
Explanation: 
The odd levels have non-zero values.
The nodes at level 1 were 1, 2, and are 2, 1 after the reversal.
The nodes at level 3 were 1, 1, 1, 1, 2, 2, 2, 2, and are 2, 2, 2, 2, 1, 1, 1, 1 after the reversal.
 


Constraints:

The number of nodes in the tree is in the range [1, 214].
0 <= Node.val <= 105
root is a perfect binary tree.



Intuition:
The problem involves reversing the values of nodes at odd levels of a binary tree. Observing the problem, 
the task can be efficiently solved using a Depth First Search (DFS) approach, where we traverse the tree 
recursively. The key observation is that reversing odd levels can be achieved by swapping values between 
symmetric nodes (mirroring nodes) on the left and right subtrees.

Approach :
Symmetric Node Swapping:
For each odd level, we need to swap the values of symmetric nodes. Nodes are considered symmetric if they belong to 
opposite sides of the root and are at the same distance from it.

For example, at level 1, the leftmost node in the left subtree swaps values with the rightmost node in the right subtree.

Recursive DFS:
Define a helper function dfs(node1, node2, level) where node1 and node2 are symmetric nodes at the current level.If the level is odd, 
swap the values of node1 and node2.

Recursively process the child nodes:
Left child of node1 with the right child of node2.
Right child of node1 with the left child of node2.

Base Case:
Stop recursion when either node1 or node2 is nullptr.

Main Function:
Call the dfs function with the left and right children of the root node, starting at level 1.

This approach ensures we traverse the tree efficiently and swap values only on odd levels.

Complexity
Time complexity: O(n), where nn is the number of nodes in the tree. Each node is visited once during the traversal.
Space complexity: O(h), where hh is the height of the tree. This accounts for the recursion stack during the DFS traversal.


class Solution {
public:

    void solve(TreeNode * root1 , TreeNode * root2 , int lvl){
        if(root1 == NULL) return ; 
        if(lvl % 2){
            swap(root1->val , root2->val) ; 
        }
        solve(root1->left , root2->right , lvl + 1) ; 
        solve(root1->right , root2->left , lvl + 1) ; 
    }

    TreeNode* reverseOddLevels(TreeNode* root) {
        if(!root) return root ; 
        solve(root->left , root->right , 1) ; 
        return root ; 
    }
};

