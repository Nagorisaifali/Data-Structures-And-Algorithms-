Minimum sum

Given an array arr[] such that each element is in the range [0 - 9],
find the minimum possible sum of two numbers formed using the elements
of the array. All digits in the given array must be used to form the
two numbers. Return a string without leading zeroes.


Examples :

Input: arr[] =  [6, 8, 4, 5, 2, 3]
Output: 604
Explanation: The minimum sum is formed by numbers 358 and 246.


Input: arr[] = [5, 3, 0, 7, 4]
Output: 82
Explanation: The minimum sum is formed by numbers 35 and 047.


Input: arr[] = [9, 4]
Output: 13
Explanation: The minimum sum is formed by numbers 9 and 4.


Constraints:
1 ≤ arr.size() ≤ 106
0 ≤ arr[i] ≤ 9


    string addStrings(string &num1, string &num2)
{
    string result = "";
    int carry = 0, i = num1.size() - 1, j = num2.size() - 1;
    while (i >= 0 || j >= 0 || carry)
    {
        int sum = carry;
        if (i >= 0)
            sum += num1[i--] - '0';
        if (j >= 0)
            sum += num2[j--] - '0';
        result += (sum % 10) + '0';
        carry = sum / 10;
    }
    reverse(result.begin(), result.end());
    return result;
}
string removeZeroes(string &sum)
{
    for (int i = 0; i < sum.size(); i++)
    {
        if (sum[i] != '0')
        {
            return sum.substr(i);
        }
    }
    return "0";
}
string minSum(vector<int> &arr)
{
    sort(arr.begin(), arr.end());
    string num1 = "", num2 = "";
    for (int i = 0; i < arr.size(); i++)
    {
        if (i % 2 == 0)
        {
            num1 += to_string(arr[i]);
        }
        else
        {
            num2 += to_string(arr[i]);
        }
    }
    string sum = addStrings(num1, num2);
    return removeZeroes(sum);
}



