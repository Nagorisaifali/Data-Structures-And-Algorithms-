Power Of Two 

Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
 

Constraints:
-231 <= n <= 231 - 1



Intuition
A number is a power of two if it can be expressed as ( 2^k ) for some non-negative integer ( k ).This means it should be divisible by 2 repeatedly until it becomes 1, with no remainder at any step.
If at any point it cannot be divided evenly by 2 (before reaching 1), it is not a power of two.

Approach
If n <= 0, immediately return false since powers of two are positive.
While n is divisible by 2:
Divide n by 2.
After the loop, check if n is equal to 1:
If yes, return true.
Otherwise, return false.


Complexity
Time complexity: ( O(log n) ) — Each division by 2 reduces n by half.
Space complexity: ( O(1) ) — Only a constant amount of extra space is used.

Code in cpp:

class Solution {
public:
    bool isPowerOfTwo(int n) {
        if (n <= 0){
            return false;
        }
        while (n % 2 == 0){
            n = n / 2;
        }
        return n == 1;
    }
};


Code in Java :

class Solution {
    public boolean isPowerOfTwo(int n) {
        if (n <= 0){
            return false;
        }
        while (n % 2 == 0){
            n = n / 2;
        }
        return n == 1;
    }
}

