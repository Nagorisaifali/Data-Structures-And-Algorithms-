Reverse a linked list

Given the head of a linked list, the task is to reverse this list and return the reversed head.

Examples:

Input: head: 1 -> 2 -> 3 -> 4 -> NULL
Output: head: 4 -> 3 -> 2 -> 1 -> NULL


Input: head: 2 -> 7 -> 10 -> 9 -> 8 -> NULL
Output: head: 8 -> 9 -> 10 -> 7 -> 2 -> NULL


Input: head: 10 -> NULL
Output: 10 -> NULL



Constraints:
1 <= number of nodes, data of nodes <= 105


Most Optimal ApproachðŸ—¿ | C++ | Two Approach

 

Time Complexity : O(n)    ********************   Space Complexity : O(1)

class Solution {
  public:
    // Function to reverse a linked list.
    struct Node* reverseList(struct Node* head) {
        Node *p=head;
        Node *prev=NULL;
        
        while (p!=NULL){
            Node *temp=p->next;
            p->next=prev;
            prev=p;
            p=temp;
        }
        return prev;
    }
};



Java

class Solution {
    Node reverseList(Node head) {
     
        Node curr=head,prev=null,next=null;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
}
 

------------------------------------------------------------------------------------------------------------------------------

 

Brute Force Approach | C++ðŸ—¿

 

Time Complexity : O(n)    ********************   Space Complexity : O(n)  

class Solution {
  public:
    struct Node* reverseList(struct Node* head) {
        
        stack<int>st;
        Node *p=head;
        while (p!=NULL){
            st.push(p->data);
            p=p->next;
        }
        p=head;
        
        while (!st.empty()){
            p->data=st.top();
            st.pop();
            p=p->next;
        }
        return head;
    }
};




Time Complexity: O(n)
Auxiliary Space: O(1)
