Given an array nums[], construct a Product Array nums[] such that nums[i] is equal to the product of all the elements of nums except nums[i].

Input: nums[] = [10, 3, 5, 6, 2]
Output: [180, 600, 360, 300, 900]
Explanation: For i=0, P[i] = 3*5*6*2 = 180.
For i=1, P[i] = 10*5*6*2 = 600.
For i=2, P[i] = 10*3*6*2 = 360.
For i=3, P[i] = 10*3*5*2 = 300.
For i=4, P[i] = 10*3*5*6 = 900.


Input: nums[] = [12,0]
Output: [0, 12]


Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)




class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    
    long long int product(int indx , vector<long long int>&nums){
        long long int ans = 1 ; 
        for(int i=0;i<nums.size();i++){
            if(i != indx){
                ans *= nums[i] ; 
            }
        }return ans ; 
    }
    
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        // code here
        
        int n = nums.size() ; 
        vector<long long int>ans(n,1) ; 
        
        for(int i=0;i<n;i++){
            ans[i] = product(i , nums) ; 
        }
        return ans ; 
    }
};