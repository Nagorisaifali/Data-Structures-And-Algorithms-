Sum of All Subset XOR Totals


The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.

For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
Given an array nums, return the sum of all XOR totals for every subset of nums. 

Note: Subsets with the same elements should be counted multiple times.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.
 

Example 1:

Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6


Example 2:

Input: nums = [5,1,6]
Output: 28
Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28


Example 3:

Input: nums = [3,4,5,6,7,8]
Output: 480
Explanation: The sum of all XOR totals for every subset is 480.
 

Constraints:
1 <= nums.length <= 12
1 <= nums[i] <= 20

Intuition
To find the sum of all XOR totals of all subsets, we can generate all possible subsets of the given array and compute the XOR of each. Then we sum those XOR values.

Since each element in the array can either be included or excluded in a subset, for an array of size n, there are 2^n subsets. We can traverse all subsets using Depth-First Search (DFS) or bitmasking.

Approach
Use DFS (recursion):
At each index, we decide whether to include the current number in the XOR or exclude it.
Maintain a running XOR total (currentXor) as we build each subset.
When we reach the end of the array, add the currentXor to the total sum.
Base case:
If index == nums.size(), return the current XOR value for this subset.
Recursive calls:
One call includes nums[index] in XOR.
The other excludes it.


class Solution {
    public int subsetXORSum(int[] nums) {
        return solve(nums , 0 , 0) ; 
    }
    public int solve(int nums[] , int i , int xor){
        if(i == nums.length){
            return xor ; 
        }
        int take = solve(nums , i+1 , nums[i]^xor) ; 
        int skip = solve(nums , i+1 , xor) ; 
        return take + skip ; 
    }
}

Time complexity: 2^n
Space complexity: O(n)
