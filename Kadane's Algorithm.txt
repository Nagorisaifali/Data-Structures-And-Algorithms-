Kadane's Algorithm

Given an integer array arr[]. Find the contiguous sub-array
(containing at least one number) that has the maximum sum and 
return its sum.


Examples:

Input: arr[] = [1, 2, 3, -2, 5]
Output: 9
Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.


Input: arr[] = [-1, -2, -3, -4]
Output: -1
Explanation: Max subarray sum is -1 of element (-1)


Input: arr[] = [5, 4, 7]
Output: 16
Explanation: Max subarray sum is 16 of element (5, 4, 7)



Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)


Approach: This problem involves finding the contiguous subarray within a given array that has the maximum sum. We can efficiently solve this problem using the Kadane's algorithm, 
which iterates through the array, keeping track of the current maximum sum and the overall maximum sum encountered so far.

Key Idea: 

The  algorithm maintains a current_sum variable to store the sum of the current subarray.
As we iterate through the array:
If the current_sumbecomes negative, we discard it and start a new subarray from the current element.
Otherwise, we update the current_sum by adding the current element.
We continuously update the max_sum variable with the maximum of current_sum and the previously stored max_sum.
Code:



class Solution {
  public:
   long long maxSubarraySum(vector<int> &arr) {
  
        long long ans = INT_MIN  ; 
        long long sum = 0 ; 
        for(int i=0;i<arr.size();i++){
            sum += arr[i] ; 
            ans = max(ans , sum) ; 
            if(sum < 0){
                sum = 0 ; 
            }
        }return ans ; 
    }
};


class Solution:
    def maxSubArraySum(self,arr):
        current_sum = 0
        max_sum = float('-inf')
        for num in arr:
            current_sum += num
            max_sum = max(max_sum, current_sum)
            if current_sum < 0:
                current_sum = 0
        return max_sum

Time Complexity: O(n)
Space Complexity: O(1)


