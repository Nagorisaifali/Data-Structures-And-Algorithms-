
Count the paths


Given a Directed Acyclic Graph (DAG) with V nodes labeled from 0 to V-1, and a list of directed edges, count the total number of distinct paths from a given start node to a destination node.
Each edge is represented as edges[i] = [u, v], indicating a directed edge from u to v.

Examples :

Input: edges[][] = [[0,1], [0,3], [2,0], [2,1], [1,3]], V = 4, src = 2, dest = 3
Output: 3
Explanation: There are three ways to reach at 3 from 2. These are: 2 -> 1 -> 3, 2 -> 0 -> 3 and 2 -> 0 -> 1 -> 3.


Input: edges[][] = [[0,1], [1,2], [1,3], [2,3]], V = 4, src = 0, dest = 3
Output: 2
Explanation: There is two way to reach at 3 from 0 that is : 0 -> 1 -> 2 -> 3 and 0 -> 1 -> 3.




Constraints:
2  ≤  V  ≤  103
1  ≤   E = edges.size()  ≤  (V * (V - 1)) / 2


Expected Complexities
Time Complexity: O(V + E)
Auxiliary Space: O(V + E)



[Naive Approach] Using Depth First Search - O(2^n) time and O(n) space
The idea is to perform a Depth First Search traversal starting from the source node and count the number of paths reaching destination node.

Step by step approach:

Create an adjacency list from the edges of the graph.
Start DFS from the source node. For each node:
If current node is destination node, return 1.
Otherwise, for each edge from current node, find the number of paths for the adjacent node recursively and add it to the result.

#include <bits/stdc++.h>
using namespace std;

int dfs(int u, int dest, vector<vector<int>> &adj) {
    
    // If destination is reached
    if (u == dest) return 1;
    int count = 0;
    
    // Count number of paths from current node 
    // to destination node.
    for (int v : adj[u]) {
        count += dfs(v, dest, adj);
    }
    return count;
}

    int countPaths(vector<vector<int>>& edges, int V, int src, int dest) {
    vector<vector<int>> adj(V);
    for (auto e: edges) {
        adj[e[0]].push_back(e[1]);
    }
    return dfs(src, dest, adj);
}

int main() {
    int V = 4;
    int src = 2, dest = 3;
    vector<vector<int>> edges = 
    {{0,1}, {0,3}, {2,0}, {2,1}, {1,3}};
    cout << countPaths(edges, V, src, dest);
    return 0;
}





