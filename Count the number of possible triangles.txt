Count the number of possible triangles

Given an integer array arr[]. Find the number of triangles that can be formed with three different array elements as lengths of three sides of the triangle. 

A triangle with three given sides is only possible if sum of any two sides is always greater than the third side.

Examples:

Input: arr[] = [4, 6, 3, 7]
Output: 3
Explanation: There are three triangles possible [3, 4, 6], [4, 6, 7] and [3, 6, 7]. Note that [3, 4, 7] is not a possible triangle.  


Input: arr[] = [10, 21, 22, 100, 101, 200, 300]
Output: 6
Explanation: There can be 6 possible triangles: [10, 21, 22], [21, 100, 101], [22, 100, 101], [10, 100, 101], [100, 101, 200] and [101, 200, 300]


Input: arr[] = [1, 2, 3]
Output: 0
Explanation: No triangles are possible.


class Solution {
public:
    // Function to count the number of possible triangles.
    int countTriangles(vector<int>& arr) {
        int n = arr.size();
        if (n < 3) return 0; // Not enough elements to form a triangle
        
        sort(arr.begin(), arr.end()); // Sort the array in ascending order
        
        int count = 0;
        
        // Iterate through the array, considering each element as the largest side
        for (int k = n - 1; k >= 2; k--) {
            int i = 0;       // Start pointer
            int j = k - 1;   // End pointer, just before k
            
            while (i < j) {
                // Check if arr[i] + arr[j] > arr[k]
                if (arr[i] + arr[j] > arr[k]) {
                    
                    count += (j - i);
                    j--; // Move the end pointer left to check for smaller pairs
                } else {
                    i++; // Move the start pointer right to increase the sum
                }
            }
        }
        
        return count;
    }
};


Time Complexity:
Sorting the array takes O(nlog‚Å°n)O(n \log n)O(nlogn).
The two-pointer technique iterates through each element, resulting in an overall complexity of O(n2)O(n^2)O(n2).
Space Complexity:
O(1)O(1)O(1), as we are not using any extra space except for variables.
