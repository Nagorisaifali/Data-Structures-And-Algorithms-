Count pairs Sum in matrices


Given two matrices mat1[][] and mat2[][] of size n x n, where the elements in each matrix are arranged in strictly ascending order. Specifically, 
each row is sorted from left to right, and the last element of a row is smaller than the first element of the next row.
You're given a target value x, your task is to find and count all pairs {a, b} such that a is from mat1 and b is from mat2 where the sum of a + b is equal to x.



Examples:

Input: n = 3, x = 21,
mat1[][] = [[1, 5, 6], [8, 10, 11], [15, 16, 18]],
mat2[][] = [[2, 4, 7], [9, 10, 12], [13, 16, 20]]
OUTPUT: 4
Explanation: The pairs whose sum is found to be 21 are (1, 20), (5, 16), (8, 13) and (11, 10).


Input: n = 2, x = 10,
mat1[][] = [[1, 2], [3, 4]]
mat2[][] = [[4, 5], [6, 7]]
Output: 2
Explanation: The pairs whose sum found to be 10 are (4, 6) and (3, 7).



Constraints:
1 ≤ n ≤ 100
1 ≤ x ≤ 105
1 ≤ mat1[i][j] , mat2[i][j] ≤ 105


//User function template for C++
class Solution{
public:	
	
	int countPairs(vector<vector<int>> &mat1, vector<vector<int>> &mat2, int n, int x)
	{
	    // Your code goes here
	    int i = 0 , j = (n*n)-1 ; 
	    int cnt = 0 ; 
	    while(j>=0 && i<n*n){
	        int sum = mat1[i/n][i%n] + mat2[j/n][j%n] ; 
	        if(sum == x){
	            cnt++ ;
	            i++ ; 
	            j-- ; 
	        }else if(sum < x){
	            i++ ; 
	        }else{
	            j-- ; 
	        }
	    }return cnt ; 
	}
};



class Solution {
  public:
    int countPairs(vector<vector<int>> &mat1, vector<vector<int>> &mat2, int x) {
        // code here
        vector<int>ans1 ;
        vector<int>ans2 ; 
        for(int i=0;i<mat1.size();i++){
            for(int j=0;j<mat2.size();j++){
                ans1.push_back(mat1[i][j]) ; 
                ans2.push_back(mat2[i][j]) ; 
            }
        }int i=0 , cnt = 0 , j = ans1.size()-1 ; 
        while(i<ans1.size() && j>=0){
            int sum = ans1[i] + ans2[j] ; 
            if(sum == x){
                cnt++ ; 
                i++ ; 
                j-- ; 
            }else if(sum < x){
                i++ ; 
            }else{
                j-- ; 
            }
        }return cnt ; 
    }
};




Time Complexity: O(n^2)
Auxiliary Space: O(1)