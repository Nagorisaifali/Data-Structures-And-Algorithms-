Peak Index in a Mountain Array

You are given an integer mountain array arr of length n where 
the values increase to a peak element and then decrease.

Return the index of the peak element.

Your task is to solve it in O(log(n)) time complexity.


Example 1:

Input: arr = [0,1,0]

Output: 1



Example 2:

Input: arr = [0,2,1,0]

Output: 1



Example 3:

Input: arr = [0,10,5,2]

Output: 1



3 <= arr.length <= 105
0 <= arr[i] <= 106



//using linear search
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        for(int i=1;i<arr.size()-1;i++){
            if(arr[i]>arr[i-1] && arr[i]>arr[i+1]){
                return i ; 
            }
        }return -1 ; 
    }
};




// using binary search 
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int i=0 , j = arr.size()-1 ; 
        int mid ; 
        while(i<=j){
            mid=(i-j)/2+j; ; 
            if(arr[mid] > arr[mid+1] && arr[mid] > arr[mid-1]){
                return mid ; 
            }else if(arr[mid] < arr[mid+1] && arr[mid] > arr[mid-1]){
                i = mid+1 ; 
            }else{
                j = mid - 1 ; 
            }
        }return 0 ; 
    }
};

