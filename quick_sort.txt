
Explanation of the Code
swap: This function swaps two elements in the array.
partition: The partition function selects a pivot and rearranges the elements in the array around it.
quicksort: This function recursively applies quicksort to the partitions created by the partition function.
printArray: This helper function prints the elements of the array.


#include <stdio.h>


// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Choosing the last element as the pivot
    int i = low - 1;        // Index of smaller element
	int j ; 
    for ( j = low; j < high; j++) {
        if (arr[j] < pivot) {  // If current element is smaller than pivot
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;  // Return the partition index
}


// Quicksort function
void quicksort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);  // Partitioning index
        quicksort(arr, low, pi - 1);         // Recursively sort elements before partition
        quicksort(arr, pi + 1, high);        // Recursively sort elements after partition
    }
}

// Function to print the array
void printArray(int arr[], int size) {
    int i ; 
	for ( i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Main function to test the quicksort algorithm
int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Original array: ");
    printArray(arr, n);

    quicksort(arr, 0, n - 1);

    printf("Sorted array: ");
    printArray(arr, n);
    return 0;
}


